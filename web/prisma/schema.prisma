// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["driverAdapters"]
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")

    // Do not use foreign keys (PlanetScale does not support them)
    relationMode = "prisma"
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}


model Keywords {
    id String @id @default(cuid())
    userId String
    keyword String
    keywordGroupId String
    keywordGroup KeywordGroups @relation(fields: [keywordGroupId], references: [id], onDelete: Cascade)

    @@index([id])
    @@index([keywordGroupId])
}

model KeywordGroups {
    id String @id @default(cuid())
    userId String
    title String
    keywords Keywords[]

    @@index([userId])
}

model JobSeen {
    id String @id @default(cuid())
    userId String
    jobId String
    title String
    seenAt DateTime @default(now())

    @@unique([userId, jobId])
    @@index([userId])
}

model Job {
    id String @id @default(cuid())
    userId String
    jobId String
    title String @db.TinyText
    company String @db.TinyText
    description String? @db.Text
    compensation String?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    status JobStatus[]
    @@unique([userId, jobId])
    @@index([userId])
}

// When updating this, don't forget to update the API validators
enum Status {
    Saved
    Applied
    Interviewing
    Rejected
    Offer
    Archived
}

model JobStatus {
    id String @id @default(cuid())
    jobId String
    job Job @relation(fields: [jobId], references: [id], onDelete: Cascade)
    status Status
    createdAt DateTime @default(now())

    @@index([jobId])
}